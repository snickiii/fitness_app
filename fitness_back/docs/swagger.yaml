basePath: /
definitions:
  handlers.LoginData:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  handlers.UpdateEmailRequest:
    properties:
      new_email:
        type: string
    type: object
  handlers.UpdateNameRequest:
    properties:
      new_name:
        type: string
    type: object
  handlers.UpdatePasswordRequest:
    properties:
      new_password:
        type: string
      old_password:
        type: string
    type: object
  handlers.UpdateUsernameRequest:
    properties:
      new_username:
        type: string
    type: object
  models.RoleType:
    enum:
    - tech
    - consumer
    type: string
    x-enum-varnames:
    - RoleTech
    - RoleConsumer
  models.Target:
    properties:
      addressPull:
        type: string
      domainPull:
        type: string
      targetID:
        type: integer
      targetName:
        type: string
      userID:
        type: integer
    type: object
  models.User:
    properties:
      email:
        type: string
      name:
        type: string
      passwordHash:
        type: string
      role:
        $ref: '#/definitions/models.RoleType'
      targets:
        items:
          $ref: '#/definitions/models.Target'
        type: array
      userID:
        type: integer
      username:
        type: string
    type: object
host: localhost:8000
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample auth service API.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Auth Service API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user by verifying their username and password, and
        return a JWT if successful
      parameters:
      - description: User login credentials
        in: body
        name: loginData
        required: true
        schema:
          $ref: '#/definitions/handlers.LoginData'
      produces:
      - application/json
      responses:
        "200":
          description: JWT token
          schema:
            type: string
        "400":
          description: Invalid request
          schema:
            type: string
        "401":
          description: Invalid login or password
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Authenticate a user and issue a JWT
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user with the given details, including hashing the
        password before saving to the database
      parameters:
      - description: User registration data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully
          schema:
            type: string
      summary: Register a new user
      tags:
      - Auth
  /user/profile:
    get:
      consumes:
      - application/json
      description: Retrieves the profile of the authenticated user along with the
        targets associated with their account
      produces:
      - application/json
      responses:
        "200":
          description: User profile and targets retrieved successfully
          schema:
            $ref: '#/definitions/models.User'
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: User not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get user profile and associated targets
      tags:
      - User
  /user/targets:
    delete:
      consumes:
      - application/json
      description: Delete the target if it is associated with the authenticated user
        based on JWT claims.
      parameters:
      - description: Target ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Target deleted successfully
          schema:
            type: string
        "400":
          description: Invalid request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "404":
          description: Target not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Delete a target associated with the current user
      tags:
      - Target
    post:
      consumes:
      - application/json
      description: Create a new target using the provided data and associate it with
        the authenticated user based on JWT claims.
      parameters:
      - description: Target details
        in: body
        name: target
        required: true
        schema:
          $ref: '#/definitions/models.Target'
      produces:
      - application/json
      responses:
        "201":
          description: Target created successfully
          schema:
            $ref: '#/definitions/models.Target'
        "400":
          description: Invalid request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Create a new target and associate it with the current user
      tags:
      - Target
    put:
      consumes:
      - application/json
      description: Update the target details if the target is associated with the
        authenticated user
      parameters:
      - description: Target ID
        in: query
        name: id
        required: true
        type: string
      - description: Updated target details
        in: body
        name: target
        required: true
        schema:
          $ref: '#/definitions/models.Target'
      produces:
      - application/json
      responses:
        "200":
          description: Target updated successfully
          schema:
            $ref: '#/definitions/models.Target'
        "400":
          description: Invalid request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "404":
          description: Target not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Update an existing target associated with the current user
      tags:
      - Target
  /user/update-email:
    put:
      consumes:
      - application/json
      description: Allows an authenticated user to update their email address
      parameters:
      - description: Update email request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateEmailRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Email updated successfully
          schema:
            type: string
        "400":
          description: Invalid request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Update user email
      tags:
      - User
  /user/update-name:
    put:
      consumes:
      - application/json
      description: Allows an authenticated user to update their name
      parameters:
      - description: Update name request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateNameRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Name updated successfully
          schema:
            type: string
        "400":
          description: Invalid request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Update name
      tags:
      - User
  /user/update-password:
    put:
      consumes:
      - application/json
      description: Allows an authenticated user to update their password by providing
        the old password and a new password
      parameters:
      - description: Update password request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdatePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password updated successfully
          schema:
            type: string
        "400":
          description: Invalid request
          schema:
            type: string
        "401":
          description: Invalid old password
          schema:
            type: string
        "403":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Update user password
      tags:
      - User
  /user/update-username:
    put:
      consumes:
      - application/json
      description: Allows an authenticated user to update their username. It also
        checks if the new username is already taken.
      parameters:
      - description: Update username request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateUsernameRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Username updated successfully
          schema:
            type: string
        "400":
          description: Invalid request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "409":
          description: Username already taken
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Update user username
      tags:
      - User
swagger: "2.0"
